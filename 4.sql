
--  Шаг 1: Увеличить зарплату всех сотрудников из отдела 'HR' на 10%
-- ------------------------------------------------
-- UPDATE — команда для изменения данных
-- Salary = Salary * 1.10 — увеличение на 10%
-- WHERE Department = 'HR' — фильтруем только сотрудников из отдела HR
-- Важно: если в будущем появятся новые отделы, условие можно адаптировать
-- ------------------------------------------------
UPDATE Employees
SET Salary = Salary * 1.10
WHERE Department = 'HR';

--  Шаг 2: Обновить Department на 'Senior IT' для сотрудников с зарплатой выше 70000.00
-- ------------------------------------------------
-- Цель: выделить высокооплачиваемых сотрудников в отдельную категорию
-- WHERE Salary > 70000.00 — фильтруем по зарплате
-- SET Department = 'Senior IT' — меняем значение в столбце Department
-- Важно: если сотрудник уже в 'Senior IT', он останется без изменений
-- ------------------------------------------------
UPDATE Employees
SET Department = 'Senior IT'
WHERE Salary > 70000.00;

--  Шаг 3: Удалить всех сотрудников, которые не назначены ни на один проект
-- ------------------------------------------------
-- Цель: очистить таблицу от "висящих" сотрудников без активности
-- NOT EXISTS — подзапрос, проверяющий отсутствие связей в EmployeeProjects
-- Если сотрудник не найден в таблице связей, он будет удалён
-- Важно: сначала убедиться, что удаление безопасно — можно сделать SELECT с тем же условием
-- ------------------------------------------------
DELETE FROM Employees
WHERE NOT EXISTS (
    SELECT 1
    FROM EmployeeProjects
    WHERE EmployeeProjects.EmployeeID = Employees.EmployeeID
);

--  Шаг 4: Вставить новый проект и назначить на него двух сотрудников
-- ------------------------------------------------
-- BEGIN/COMMIT — транзакция, объединяющая несколько операций
-- Это как сказать: "Выполни всё сразу, или ничего"
-- INSERT INTO Projects — добавляем новый проект
-- INSERT INTO EmployeeProjects — назначаем сотрудников на проект
-- Важно: если одна из вставок не сработает, COMMIT не произойдёт — данные не будут повреждены
-- ------------------------------------------------
BEGIN;

-- Вставка нового проекта
-- Название: Data Migration Initiative
-- Бюджет: 120000.00
-- Даты: с 1 сентября 2025 по 28 февраля 2026
INSERT INTO Projects (ProjectName, Budget, StartDate, EndDate)
VALUES ('Data Migration Initiative', 120000.00, '2025-09-01', '2026-02-28');

-- Назначение сотрудников на новый проект
-- Предполагаем, что ProjectID нового проекта — 4 (если это четвёртый по счёту)
-- В реальной практике лучше использовать RETURNING для получения точного ID
INSERT INTO EmployeeProjects (EmployeeID, ProjectID, HoursWorked)
VALUES 
    (2, 4, 100),  -- Сотрудник с ID 2 работает 100 часов
    (3, 4, 120);  -- Сотрудник с ID 3 работает 120 часов

COMMIT;

