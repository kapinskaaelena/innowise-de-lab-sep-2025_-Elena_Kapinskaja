# Задача 1: Список покупок 
# Задание: У вас есть список продуктов, которые нужно купить. Напишите программу, 
# которая выводит этот список в виде пронумерованного перечня. 
shopping_list = ["milk", "bread", "eggs", "butter", "apples"]

print("Список покупок:")

# Перебираем список с помощью функции enumerate, чтобы получить и индекс, и значение
for index, item in enumerate(shopping_list, start=1):
    # Выводим номер (index) и название продукта (item)
    print(f"{index}. {item}")
# Задача 2: Обратный отсчет до запуска 
# Задание: Напишите программу, которая имитирует обратный отсчет перед запуском 
# ракеты. Программа должна запросить у пользователя число (например, 5), а затем 
# вывести отсчет от этого числа до 1, после чего напечатать "Go!".
# Запрашиваем у пользователя число для обратного отсчета
countdown_start = int(input("Введите число для обратного отсчета: "))

# Цикл от введённого числа до 1 (включительно), шаг -1
for i in range(countdown_start, 0, -1):
    print(f"{i}...")  # Выводим текущее число с троеточием

# После завершения цикла — финальный запуск!
print("Go!")
# Задача 3: Угадай число 
# Задание: Напишите простую игру. Программа "загадывает" число от 1 до 10. 
# Пользователь должен угадать это число. Цикл while должен продолжаться до тех пор, 
# пока пользователь не введет правильный ответ.
# Загаданное число
secret_number = 7

# Запускаем цикл, пока пользователь не угадает
while True:
    # Запрашиваем число у пользователя
    guess = int(input("Угадайте число от 1 до 10: "))
    
    # Проверяем, совпадает ли с загаданным
    if guess == secret_number:
        print(" Поздравляю! Вы угадали число!")
        break  # Выход из цикла
    else:
        print("Неверно, попробуйте еще раз.")
# Задача 4: Обработка данных 
# Задание: У вас есть список с баллами студентов. Вам нужно посчитать сумму баллов, но 
# с особыми правилами: 
# ● Если балл отрицательный (< 0), его нужно проигнорировать и перейти к 
# следующему. 
# ● Если встречается балл 0, это сигнал, что список данных обрывается, и нужно 
# немедленно прекратить подсчет. 
# ● Если цикл прошел через все баллы и не был прерван (т.е. не встретил 0), нужно 
# вывести сообщение, что все данные были обработаны корректно. 
# Используйте break, continue или else для выполнения условий.
scores = [75, 88, -10, 95, 100, -25, 89]
total_score = 0

# Цикл перебирает каждый балл
for score in scores:
    if score < 0:
        continue  # Пропускаем отрицательные баллы
    if score == 0:
        print("Обработка прервана.")
        break  # Прерываем цикл, если встретили 0
    total_score += score
    print(f"Добавлен балл: {score}")
else:
    # Этот блок выполнится, только если цикл НЕ был прерван через break
    print("Все данные успешно обработаны.")

# Выводим итоговую сумму
print(f"\nИтоговая сумма баллов: {total_score}")
# Задача 5: Рисуем Прямоугольник (optional) 
# Задание: Напишите программу, которая запрашивает у пользователя два числа: высоту и 
# ширину. Затем программа должна "нарисовать" в консоли прямоугольник из звездочек (*) 
# указанного размера. 
# Подсказка: 
# ● Внешний цикл будет отвечать за количество строк (высоту). 
# ● Внутренний цикл будет в каждой строке выводить нужное количество звездочек 
# (ширину).
# Запрашиваем размеры у пользователя
height = int(input("Введите высоту прямоугольника: "))
width = int(input("Введите ширину прямоугольника: "))

print("\nВаш прямоугольник:\n")

# Внешний цикл — отвечает за строки (высоту)
for row in range(height):
    # Внутренний цикл — отвечает за количество звёздочек в строке (ширину)
    print("*" * width)  # Просто повторяем символ * нужное количество раз